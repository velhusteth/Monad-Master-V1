import { deposit } from "./deposit";
import { redeem_aprMON, redeem_shMON } from "./redeem";
import { stake_aprMON, stake_shMON } from "./stake";
import { withdraw } from "./withdraw";
import { getRandomFloat } from "./utils/random";
import * as fs from "fs/promises";
import * as path from "path";

// ‚úÖ B·∫£n ƒë·ªì t√™n h√†m sang nh√£n ti·∫øng Vi·ªát ƒë·ªÉ log
const labelMap: Record<string, string> = {
  deposit: "N·∫°p MON",
  withdraw: "R√∫t MON",
  stake_aprMON: "Stake aprMon",
  stake_shMON: "Stake shMon",
  redeem_aprMON: "Redeem aprMon",
  redeem_shMON: "Redeem shMon",
};

// ‚úÖ Danh s√°ch c√°c h√†m
const functions = [
  deposit,
  withdraw,
  stake_shMON,
  redeem_shMON,
  stake_aprMON,
  redeem_aprMON,
];

const functionNames = functions.map((f) => f.name);

// ‚úÖ File CSV l∆∞u s·ªë l·∫ßn ch·∫°y
const csvFilePath = path.join(__dirname, "../function_calls.csv");

async function loadCounters(): Promise<Record<string, number>> {
  const counters: Record<string, number> = functionNames.reduce((acc, fn) => {
    acc[fn] = 0;
    return acc;
  }, {} as Record<string, number>);

  try {
    const data = await fs.readFile(csvFilePath, "utf8");
    const lines = data.trim().split("\n");
    if (lines.length > 1) {
      const counts = lines[1].split(",").map(Number);
      for (let i = 0; i < functionNames.length; i++) {
        counters[functionNames[i]] = counts[i] || 0;
      }
    }
  } catch {
    // Kh√¥ng c√≥ file, b·ªè qua
  }

  return counters;
}

async function saveCounters(counters: Record<string, number>) {
  const header = `${functionNames.join(",")}\n`;
  const csvLine = `${Object.values(counters).join(",")}\n`;
  const csvContent = header + csvLine;
  await fs.writeFile(csvFilePath, csvContent);
}

// ‚úÖ H√†m ch√≠nh
async function run() {
  const counters = await loadCounters();

  // üëâ Random h√†m v√† chu·∫©n b·ªã th√¥ng tin
  const randomIndex = Math.floor(Math.random() * functions.length);
  const fn = functions[randomIndex];
  const selectedFunctionName = functionNames[randomIndex];
  const label = labelMap[selectedFunctionName] || selectedFunctionName;

  const amount = getRandomFloat(0.1, 0.5, 2);
  console.log(`üéØ ƒêang ch·∫°y h√†m: ${selectedFunctionName}(${amount})`);

  try {
    // ‚úÖ G·ªçi h√†m t∆∞∆°ng ·ª©ng c√≥ truy·ªÅn amount
    const result = await fn(amount);

    counters[selectedFunctionName] += 1;
    await saveCounters(counters);

    if (result) {
      // ‚úÖ G·ª≠i log d·∫°ng Telegram ƒë·ªçc ƒë∆∞·ª£c
      console.log(`TELEGRAM_LOG::‚úÖ ƒê√£ th·ª±c hi·ªán: ${label} SL: ${amount}`);

      // ƒê·∫£m b·∫£o stdout ƒë∆∞·ª£c flush tr∆∞·ªõc khi exit
      process.stdout.write("", async () => {
        await new Promise((res) => setTimeout(res, 100));
        process.exit(0); // th√†nh c√¥ng ‚Üí cron s·∫Ω ch·ªù 1 ph√∫t r·ªìi g·ªçi l·∫°i
      });
    } else {
      console.log(`‚ö†Ô∏è ${label} b·ªã skip ho·∫∑c kh√¥ng ƒë·ªß ƒëi·ªÅu ki·ªán.`);
      process.exit(0);
    }
  } catch (error: any) {
    counters[selectedFunctionName] += 1;
    await saveCounters(counters);

    console.error("‚ùå L·ªói khi ch·∫°y h√†m:", error.message || error);
    process.exit(1); // l·ªói ‚Üí cron ch·∫°y ti·∫øp kh√¥ng delay
  }
}

run();
